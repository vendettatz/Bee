repeat task.wait() until game:IsLoaded()
getgenv().ViciousBeeSettings = {
	ScriptLoaded = true,
	Movement = "Teleport",
	ViciousBeeMin = 1,
	ViciousBeeMax = 7
}

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local Particles = Workspace:WaitForChild("Particles")
local Monsters = Workspace:WaitForChild("Monsters")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local RootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local Hour = os.date("!*t").hour
local PlaceId = game.PlaceId
local AllIds = {}
local Found = ""

local ServersFile = pcall(function()
	AllIds = HttpService:JSONDecode(readfile("NotSameServers.json"))
end)
if not ServersFile then
	table.insert(AllIds, Hour)
	writefile("NotSameServers.json", HttpService:JSONEncode(AllIds))
end

local function CheckBeeLevel(Name)
	local Level = tonumber(Name:match("%d+"))
	return Level and Level >= getgenv().ViciousBeeSettings.ViciousBeeMin and Level <= getgenv().ViciousBeeSettings.ViciousBeeMax
end

local function CheckForVicious()
	for _, Monster in ipairs(Monsters:GetChildren()) do
		if string.find(Monster.Name, "Vicious Bee") and CheckBeeLevel(Monster.Name) then
			return {true, Monster}
		end
	end
	return {false}
end

local function TeleportToBee(ViciousBee)
	if getgenv().ViciousBeeSettings.Movement == "Teleport" then
		RootPart.CFrame = ViciousBee.PrimaryPart.CFrame
	elseif getgenv().ViciousBeeSettings.Movement == "Tween" then
		TweenService:Create(
			RootPart,
			TweenInfo.new(1, Enum.EasingStyle.Linear),
			{CFrame = ViciousBee.PrimaryPart.CFrame}
		):Play()
	elseif getgenv().ViciousBeeSettings.Movement == "Walk" then
		Humanoid:MoveTo(ViciousBee.PrimaryPart.Position)
	end
end

local function TeleportFunction()
	local Success, Site = pcall(function()
		local Url = 'https://games.roblox.com/v1/games/' .. PlaceId .. '/servers/Public?sortOrder=Asc&limit=100'
		if Found ~= "" then Url = Url .. '&cursor=' .. Found end
		return HttpService:JSONDecode(game:HttpGet(Url))
	end)
	if not Success or not Site then return "Couldn't get servers" end

	if Site.nextPageCursor then Found = Site.nextPageCursor end

	for _, Server in pairs(Site.data) do
		if Server.playing < Server.maxPlayers and not table.find(AllIds, Server.id) then
			table.insert(AllIds, Server.id)
			writefile("NotSameServers.json", HttpService:JSONEncode(AllIds))
			TeleportService:TeleportToPlaceInstance(PlaceId, Server.id, LocalPlayer)
			return
		end
	end
end

function ServerHop()
	coroutine.wrap(function()
		local timeout = os.time() + 60
		while os.time() < timeout do
			task.wait(0.48)
			local success, result = pcall(TeleportFunction)
			if success and result ~= "Couldn't get servers" then break end
		end
	end)()
end

local function Main()
	local Returned = CheckForVicious()
	if Returned[1] then
		TeleportToBee(Returned[2])
	else
		ServerHop()
	end
end

Main()
